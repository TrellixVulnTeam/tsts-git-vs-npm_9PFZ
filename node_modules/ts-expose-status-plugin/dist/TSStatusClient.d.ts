import NodeIPC from 'node-ipc';
import { SimpleDiagnostic } from './Protocol';
declare type IPC = InstanceType<typeof NodeIPC.IPC>;
declare type NodeIPCServer = typeof NodeIPC.server;
declare type NodeIPCClient = ReturnType<NodeIPCServer['emit']>;
/**
 * Client code for communicating with ts-expose-status-plugin.
 *
 * This client exposes async methods for interfacing with the TS language service. With the current
 * implementation, only one simultaneous method call is allowed.
 */
export default class TSStatusClient {
    readonly ipc: IPC;
    readonly connection: NodeIPCClient;
    private responseCallback;
    private constructor();
    static withClient<T>({ onSuccess, onError, }: {
        onSuccess: (client: TSStatusClient) => Promise<T>;
        onError: (e: Error) => Promise<T>;
    }): Promise<T>;
    private static connect;
    private disconnect;
    getAllErrors(): Promise<Array<SimpleDiagnostic>>;
    getErrorsForFiles(filenames: Array<string>): Promise<Array<SimpleDiagnostic>>;
    private call;
}
export {};
