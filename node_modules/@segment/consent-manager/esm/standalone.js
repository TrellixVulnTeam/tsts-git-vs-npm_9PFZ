import React from 'react';
import ReactDOM from 'react-dom';
import inEU from '@segment/in-eu';
import { ConsentManager, openConsentManager, doNotTrack } from '.';

export var version = process.env.VERSION;
export { openConsentManager, doNotTrack, inEU };

var dataset = document.currentScript && document.currentScript.dataset;

var props = {};
if (window.consentManagerConfig) {
  // Allow using global variable
  if (typeof window.consentManagerConfig === 'function') {
    props = window.consentManagerConfig({
      React: React,
      version: version,
      openConsentManager: openConsentManager,
      doNotTrack: doNotTrack,
      inEU: inEU
    });
  } else {
    props = window.consentManagerConfig;
  }
} else if (dataset) {
  // Allow using data attributes on the script tag
  props.container = dataset.container;
  props.writeKey = dataset.writekey;
  props.otherWriteKeys = dataset.otherwritekeys;
  props.implyConsentOnInteraction = dataset.implyconsentoninteraction;
  props.cookieDomain = dataset.cookiedomain;
  props.bannerContent = dataset.bannercontent;
  props.bannerTextColor = dataset.bannertextcolor;
  props.bannerBackgroundColor = dataset.bannerbackgroundcolor;
  props.preferencesDialogTitle = dataset.preferencesdialogtitle;
  props.preferencesDialogContent = dataset.preferencesdialogcontent;
  props.cancelDialogTitle = dataset.canceldialogtitle;
  props.cancelDialogContent = dataset.canceldialogcontent;
}

if (!props.container) {
  throw new Error('ConsentManager: container is required');
}

if (!props.writeKey) {
  throw new Error('ConsentManager: writeKey is required');
}

if (!props.bannerContent) {
  throw new Error('ConsentManager: bannerContent is required');
}

if (!props.preferencesDialogContent) {
  throw new Error('ConsentManager: preferencesDialogContent is required');
}

if (!props.cancelDialogContent) {
  throw new Error('ConsentManager: cancelDialogContent is required');
}

if (typeof props.otherWriteKeys === 'string') {
  props.otherWriteKeys = props.otherWriteKeys.split(',');
}

if (typeof props.implyConsentOnInteraction === 'string') {
  props.implyConsentOnInteraction = props.implyConsentOnInteraction === 'true';
}

var container = document.querySelector(props.container);

if (!container) {
  throw new Error('ConsentManager: container not found');
}

ReactDOM.render(React.createElement(ConsentManager, props), container);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdGFuZGFsb25lLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUmVhY3RET00iLCJpbkVVIiwiQ29uc2VudE1hbmFnZXIiLCJvcGVuQ29uc2VudE1hbmFnZXIiLCJkb05vdFRyYWNrIiwidmVyc2lvbiIsInByb2Nlc3MiLCJlbnYiLCJWRVJTSU9OIiwiZGF0YXNldCIsImRvY3VtZW50IiwiY3VycmVudFNjcmlwdCIsInByb3BzIiwid2luZG93IiwiY29uc2VudE1hbmFnZXJDb25maWciLCJjb250YWluZXIiLCJ3cml0ZUtleSIsIndyaXRla2V5Iiwib3RoZXJXcml0ZUtleXMiLCJvdGhlcndyaXRla2V5cyIsImltcGx5Q29uc2VudE9uSW50ZXJhY3Rpb24iLCJpbXBseWNvbnNlbnRvbmludGVyYWN0aW9uIiwiY29va2llRG9tYWluIiwiY29va2llZG9tYWluIiwiYmFubmVyQ29udGVudCIsImJhbm5lcmNvbnRlbnQiLCJiYW5uZXJUZXh0Q29sb3IiLCJiYW5uZXJ0ZXh0Y29sb3IiLCJiYW5uZXJCYWNrZ3JvdW5kQ29sb3IiLCJiYW5uZXJiYWNrZ3JvdW5kY29sb3IiLCJwcmVmZXJlbmNlc0RpYWxvZ1RpdGxlIiwicHJlZmVyZW5jZXNkaWFsb2d0aXRsZSIsInByZWZlcmVuY2VzRGlhbG9nQ29udGVudCIsInByZWZlcmVuY2VzZGlhbG9nY29udGVudCIsImNhbmNlbERpYWxvZ1RpdGxlIiwiY2FuY2VsZGlhbG9ndGl0bGUiLCJjYW5jZWxEaWFsb2dDb250ZW50IiwiY2FuY2VsZGlhbG9nY29udGVudCIsIkVycm9yIiwic3BsaXQiLCJxdWVyeVNlbGVjdG9yIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQixXQUFyQjtBQUNBLE9BQU9DLElBQVAsTUFBaUIsZ0JBQWpCO0FBQ0EsU0FBUUMsY0FBUixFQUF3QkMsa0JBQXhCLEVBQTRDQyxVQUE1QyxRQUE2RCxHQUE3RDs7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aW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcbmltcG9ydCBpbkVVIGZyb20gJ0BzZWdtZW50L2luLWV1J1xuaW1wb3J0IHtDb25zZW50TWFuYWdlciwgb3BlbkNvbnNlbnRNYW5hZ2VyLCBkb05vdFRyYWNrfSBmcm9tICcuJ1xuXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IHByb2Nlc3MuZW52LlZFUlNJT05cbmV4cG9ydCB7b3BlbkNvbnNlbnRNYW5hZ2VyLCBkb05vdFRyYWNrLCBpbkVVfVxuXG5jb25zdCBkYXRhc2V0ID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0LmRhdGFzZXRcblxubGV0IHByb3BzID0ge31cbmlmICh3aW5kb3cuY29uc2VudE1hbmFnZXJDb25maWcpIHtcbiAgLy8gQWxsb3cgdXNpbmcgZ2xvYmFsIHZhcmlhYmxlXG4gIGlmICh0eXBlb2Ygd2luZG93LmNvbnNlbnRNYW5hZ2VyQ29uZmlnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcHJvcHMgPSB3aW5kb3cuY29uc2VudE1hbmFnZXJDb25maWcoe1xuICAgICAgUmVhY3QsXG4gICAgICB2ZXJzaW9uLFxuICAgICAgb3BlbkNvbnNlbnRNYW5hZ2VyLFxuICAgICAgZG9Ob3RUcmFjayxcbiAgICAgIGluRVVcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIHByb3BzID0gd2luZG93LmNvbnNlbnRNYW5hZ2VyQ29uZmlnXG4gIH1cbn0gZWxzZSBpZiAoZGF0YXNldCkge1xuICAvLyBBbGxvdyB1c2luZyBkYXRhIGF0dHJpYnV0ZXMgb24gdGhlIHNjcmlwdCB0YWdcbiAgcHJvcHMuY29udGFpbmVyID0gZGF0YXNldC5jb250YWluZXJcbiAgcHJvcHMud3JpdGVLZXkgPSBkYXRhc2V0LndyaXRla2V5XG4gIHByb3BzLm90aGVyV3JpdGVLZXlzID0gZGF0YXNldC5vdGhlcndyaXRla2V5c1xuICBwcm9wcy5pbXBseUNvbnNlbnRPbkludGVyYWN0aW9uID0gZGF0YXNldC5pbXBseWNvbnNlbnRvbmludGVyYWN0aW9uXG4gIHByb3BzLmNvb2tpZURvbWFpbiA9IGRhdGFzZXQuY29va2llZG9tYWluXG4gIHByb3BzLmJhbm5lckNvbnRlbnQgPSBkYXRhc2V0LmJhbm5lcmNvbnRlbnRcbiAgcHJvcHMuYmFubmVyVGV4dENvbG9yID0gZGF0YXNldC5iYW5uZXJ0ZXh0Y29sb3JcbiAgcHJvcHMuYmFubmVyQmFja2dyb3VuZENvbG9yID0gZGF0YXNldC5iYW5uZXJiYWNrZ3JvdW5kY29sb3JcbiAgcHJvcHMucHJlZmVyZW5jZXNEaWFsb2dUaXRsZSA9IGRhdGFzZXQucHJlZmVyZW5jZXNkaWFsb2d0aXRsZVxuICBwcm9wcy5wcmVmZXJlbmNlc0RpYWxvZ0NvbnRlbnQgPSBkYXRhc2V0LnByZWZlcmVuY2VzZGlhbG9nY29udGVudFxuICBwcm9wcy5jYW5jZWxEaWFsb2dUaXRsZSA9IGRhdGFzZXQuY2FuY2VsZGlhbG9ndGl0bGVcbiAgcHJvcHMuY2FuY2VsRGlhbG9nQ29udGVudCA9IGRhdGFzZXQuY2FuY2VsZGlhbG9nY29udGVudFxufVxuXG5pZiAoIXByb3BzLmNvbnRhaW5lcikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0NvbnNlbnRNYW5hZ2VyOiBjb250YWluZXIgaXMgcmVxdWlyZWQnKVxufVxuXG5pZiAoIXByb3BzLndyaXRlS2V5KSB7XG4gIHRocm93IG5ldyBFcnJvcignQ29uc2VudE1hbmFnZXI6IHdyaXRlS2V5IGlzIHJlcXVpcmVkJylcbn1cblxuaWYgKCFwcm9wcy5iYW5uZXJDb250ZW50KSB7XG4gIHRocm93IG5ldyBFcnJvcignQ29uc2VudE1hbmFnZXI6IGJhbm5lckNvbnRlbnQgaXMgcmVxdWlyZWQnKVxufVxuXG5pZiAoIXByb3BzLnByZWZlcmVuY2VzRGlhbG9nQ29udGVudCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0NvbnNlbnRNYW5hZ2VyOiBwcmVmZXJlbmNlc0RpYWxvZ0NvbnRlbnQgaXMgcmVxdWlyZWQnKVxufVxuXG5pZiAoIXByb3BzLmNhbmNlbERpYWxvZ0NvbnRlbnQpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdDb25zZW50TWFuYWdlcjogY2FuY2VsRGlhbG9nQ29udGVudCBpcyByZXF1aXJlZCcpXG59XG5cbmlmICh0eXBlb2YgcHJvcHMub3RoZXJXcml0ZUtleXMgPT09ICdzdHJpbmcnKSB7XG4gIHByb3BzLm90aGVyV3JpdGVLZXlzID0gcHJvcHMub3RoZXJXcml0ZUtleXMuc3BsaXQoJywnKVxufVxuXG5pZiAodHlwZW9mIHByb3BzLmltcGx5Q29uc2VudE9uSW50ZXJhY3Rpb24gPT09ICdzdHJpbmcnKSB7XG4gIHByb3BzLmltcGx5Q29uc2VudE9uSW50ZXJhY3Rpb24gPSBwcm9wcy5pbXBseUNvbnNlbnRPbkludGVyYWN0aW9uID09PSAndHJ1ZSdcbn1cblxuY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwcm9wcy5jb250YWluZXIpXG5cbmlmICghY29udGFpbmVyKSB7XG4gIHRocm93IG5ldyBFcnJvcignQ29uc2VudE1hbmFnZXI6IGNvbnRhaW5lciBub3QgZm91bmQnKVxufVxuXG5SZWFjdERPTS5yZW5kZXIoPENvbnNlbnRNYW5hZ2VyIHsuLi5wcm9wc30gLz4sIGNvbnRhaW5lcilcbiJdfQ==