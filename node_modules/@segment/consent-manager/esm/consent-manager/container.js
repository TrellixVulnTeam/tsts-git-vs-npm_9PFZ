import _getIterator from 'babel-runtime/core-js/get-iterator';
import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import EventEmitter from 'events';
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Banner from './banner';
import PreferenceDialog from './preference-dialog';
import CancelDialog from './cancel-dialog';
import { ADVERTISING_CATEGORIES, FUNCTIONAL_CATEGORIES } from './categories';

var emitter = new EventEmitter();

export function openDialog() {
  emitter.emit('openDialog');
}

var Container = function (_PureComponent) {
  _inherits(Container, _PureComponent);

  function Container() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Container);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Container.__proto__ || _Object$getPrototypeOf(Container)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isDialogOpen: false,
      isCancelling: false
    }, _this.openDialog = function () {
      _this.setState({
        isDialogOpen: true
      });
    }, _this.closeDialog = function () {
      _this.setState({
        isDialogOpen: false
      });
    }, _this.handleBannerRef = function (node) {
      _this.banner = node;
    }, _this.handlePreferenceDialogRef = function (node) {
      _this.preferenceDialog = node;
    }, _this.handleCancelDialogRef = function (node) {
      _this.cancelDialog = node;
    }, _this.handleBannerAccept = function () {
      var saveConsent = _this.props.saveConsent;


      saveConsent();
    }, _this.handleBodyClick = function (e) {
      var _this$props = _this.props,
          newDestinations = _this$props.newDestinations,
          saveConsent = _this$props.saveConsent,
          isConsentRequired = _this$props.isConsentRequired,
          implyConsentOnInteraction = _this$props.implyConsentOnInteraction;

      // Do nothing if no new implicit consent needs to be saved

      if (!isConsentRequired || !implyConsentOnInteraction || newDestinations.length === 0) {
        return;
      }

      // Ignore propogated clicks from inside the consent manager
      if (_this.banner && _this.banner.contains(e.target) || _this.preferenceDialog && _this.preferenceDialog.contains(e.target) || _this.cancelDialog && _this.cancelDialog.contains(e.target)) {
        return;
      }

      saveConsent(undefined, false);
    }, _this.handleCategoryChange = function (category, value) {
      var setPreferences = _this.props.setPreferences;


      setPreferences(_defineProperty({}, category, value));
    }, _this.handleSave = function () {
      var saveConsent = _this.props.saveConsent;


      _this.setState({
        isDialogOpen: false
      });
      saveConsent();
    }, _this.handleCancel = function () {
      var _this$props2 = _this.props,
          resetPreferences = _this$props2.resetPreferences,
          newDestinations = _this$props2.newDestinations;


      _this.setState({
        isDialogOpen: false
      });

      // Only show the cancel confirmation if there's unconsented destinations
      if (newDestinations.length > 0) {
        _this.setState({
          isCancelling: true
        });
      } else {
        resetPreferences();
      }
    }, _this.handleCancelBack = function () {
      _this.setState({
        isDialogOpen: true,
        isCancelling: false
      });
    }, _this.handleCancelConfirm = function () {
      var resetPreferences = _this.props.resetPreferences;


      _this.setState({
        isCancelling: false
      });
      resetPreferences();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Container, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          destinations = _props.destinations,
          newDestinations = _props.newDestinations,
          preferences = _props.preferences,
          isConsentRequired = _props.isConsentRequired,
          bannerContent = _props.bannerContent,
          bannerSubContent = _props.bannerSubContent,
          bannerTextColor = _props.bannerTextColor,
          bannerBackgroundColor = _props.bannerBackgroundColor,
          preferencesDialogTitle = _props.preferencesDialogTitle,
          preferencesDialogContent = _props.preferencesDialogContent,
          cancelDialogTitle = _props.cancelDialogTitle,
          cancelDialogContent = _props.cancelDialogContent;
      var _state = this.state,
          isDialogOpen = _state.isDialogOpen,
          isCancelling = _state.isCancelling;

      var marketingDestinations = [];
      var advertisingDestinations = [];
      var functionalDestinations = [];

      var _loop = function _loop(destination) {
        if (ADVERTISING_CATEGORIES.find(function (c) {
          return c === destination.category;
        })) {
          advertisingDestinations.push(destination);
        } else if (FUNCTIONAL_CATEGORIES.find(function (c) {
          return c === destination.category;
        })) {
          functionalDestinations.push(destination);
        } else {
          // Fallback to marketing
          marketingDestinations.push(destination);
        }
      };

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _getIterator(destinations), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var destination = _step.value;

          _loop(destination);
        }

        // TODO: add state for banner so it doesn't disappear on implicit consent (which is annoying UX)
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return React.createElement(
        'div',
        null,
        isConsentRequired && newDestinations.length > 0 && React.createElement(Banner, {
          innerRef: this.handleBannerRef,
          onAccept: this.handleBannerAccept,
          onChangePreferences: this.openDialog,
          content: bannerContent,
          subContent: bannerSubContent,
          textColor: bannerTextColor,
          backgroundColor: bannerBackgroundColor
        }),
        isDialogOpen && React.createElement(PreferenceDialog, {
          innerRef: this.handlePreferenceDialogRef,
          onCancel: this.handleCancel,
          onSave: this.handleSave,
          onChange: this.handleCategoryChange,
          marketingDestinations: marketingDestinations,
          advertisingDestinations: advertisingDestinations,
          functionalDestinations: functionalDestinations,
          marketingAndAnalytics: preferences.marketingAndAnalytics,
          advertising: preferences.advertising,
          functional: preferences.functional,
          title: preferencesDialogTitle,
          content: preferencesDialogContent
        }),
        isCancelling && React.createElement(CancelDialog, {
          innerRef: this.handleCancelDialogRef,
          onBack: this.handleCancelBack,
          onConfirm: this.handleCancelConfirm,
          title: cancelDialogTitle,
          content: cancelDialogContent
        })
      );
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props2 = this.props,
          isConsentRequired = _props2.isConsentRequired,
          implyConsentOnInteraction = _props2.implyConsentOnInteraction;


      emitter.on('openDialog', this.openDialog);

      if (isConsentRequired && implyConsentOnInteraction) {
        document.body.addEventListener('click', this.handleBodyClick, false);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      emitter.removeListener('openDialog', this.openDialog);
      document.body.removeEventListener('click', this.handleBodyClick, false);
    }
  }]);

  return Container;
}(PureComponent);

Container.displayName = 'Container';
Container.propTypes = {
  setPreferences: PropTypes.func.isRequired,
  resetPreferences: PropTypes.func.isRequired,
  saveConsent: PropTypes.func.isRequired,
  destinations: PropTypes.arrayOf(PropTypes.object).isRequired,
  newDestinations: PropTypes.arrayOf(PropTypes.object).isRequired,
  preferences: PropTypes.object.isRequired,
  isConsentRequired: PropTypes.bool.isRequired,
  implyConsentOnInteraction: PropTypes.bool.isRequired,
  bannerContent: PropTypes.node.isRequired,
  bannerSubContent: PropTypes.string.isRequired,
  bannerTextColor: PropTypes.string.isRequired,
  bannerBackgroundColor: PropTypes.string.isRequired,
  preferencesDialogTitle: PropTypes.node.isRequired,
  preferencesDialogContent: PropTypes.node.isRequired,
  cancelDialogTitle: PropTypes.node.isRequired,
  cancelDialogContent: PropTypes.node.isRequired
};
export default Container;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,